def print_status():
    def print_hedge_status(joint, tokenA, tokenB):
        callID = joint.activeCallID()
        putID = joint.activePutID()
        callProvider = Contract("0xb9ed94c6d594b2517c4296e24A8c517FF133fb6d")
        putProvider = Contract("0x790e96E7452c3c2200bbCAA58a468256d482DD8b")
        callInfo = callProvider.options(callID)
        putInfo = putProvider.options(putID)
        assert (joint.activeCallID() != 0) & (joint.activePutID() != 0)
        (callPayout, putPayout) = joint.getOptionsProfit()
        print(f"Bought two options:")
        print(f"CALL #{callID}")
        print(f"\tStrike {callInfo[1]/1e8}")
        print(f"\tAmount {callInfo[2]/1e18}")
        print(f"\tTTM {(callInfo[4]-chain.time())/3600}h")
        costCall = (callInfo[5] + callInfo[6]) / 0.8
        print(f"\tCost {(callInfo[5]+callInfo[6])/0.8/1e18} {tokenA.symbol()}")
        print(f"\tPayout: {callPayout/1e18} {tokenA.symbol()}")
        print(f"PUT #{putID}")
        print(f"\tStrike {putInfo[1]/1e8}")
        print(f"\tAmount {putInfo[2]/1e18}")
        print(f"\tTTM {(putInfo[4]-chain.time())/3600}h")
        costPut = (putInfo[5] + putInfo[6]) / 0.8
        print(f"\tCost {costPut/1e6} {tokenB.symbol()}")
        print(f"\tPayout: {putPayout/1e6} {tokenB.symbol()}")
        return (callInfo[1] / 1e8, (callInfo[4] - chain.time()) / 3600)

    joint = Contract("0x7023Ae05e0FD6f7d6C7BbCB8b435BaF065Df3acD")
    pair = Contract(joint.pair())
    (reserve0, reserve1, l) = pair.getReserves()
    providerA = Contract(joint.providerA())
    providerB = Contract(joint.providerB())
    usdc = Contract(joint.tokenA())
    weth = Contract(joint.tokenB())
    vaultA = Contract(providerA.vault())
    vaultB = Contract(providerB.vault())
    totalDebtA = vaultA.strategies(providerA).dict()["totalDebt"]
    totalDebtB = vaultB.strategies(providerB).dict()["totalDebt"]
    currentPrice = reserve0 / reserve1 * 1e12
    balanceA = providerA.balanceOfWant()
    balanceB = providerB.balanceOfWant()
    assetsA = joint.estimatedTotalAssetsInToken(usdc)
    assetsB = joint.estimatedTotalAssetsInToken(weth)
    strategist = providerA.strategist()
    providerA.setInvestWant(False, {"from": strategist})
    providerB.setInvestWant(False, {"from": strategist})
    providerA.setTakeProfit(True, {"from": strategist})
    providerB.setTakeProfit(True, {"from": strategist})
    print(f"InitialA: {totalDebtA/1e6} {usdc.symbol()}")
    print(f"InitialB: {totalDebtB/1e18} {weth.symbol()}")
    initialPrice, ttm = print_hedge_status(joint, weth, usdc)
    providerA.harvest({"from": strategist})
    profitA = history[-1].events["Harvested"]["profit"]
    providerB.harvest({"from": strategist})
    profitB = history[-1].events["Harvested"]["profit"]
    chain.undo(6)

    print(f"CurrentPrice: {currentPrice}")
    print(f"InitialPrice: {initialPrice}")
    print(f"Price change: {(currentPrice/initialPrice-1)*100}%")
    print(f"CurrentBalanceA: {(balanceA+assetsA)/1e6} {usdc.symbol()}")
    print(f"CurrentBalanceB: {(balanceB+assetsB)/1e18} {weth.symbol()}")
    print(f"ReturnA: {profitA/totalDebtA*100*365*24/(7*24-ttm)}%")
    print(f"ReturnB: {profitB/totalDebtB*100*365*24/(7*24-ttm)}%")
